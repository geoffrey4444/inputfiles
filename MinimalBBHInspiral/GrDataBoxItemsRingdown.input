EventAndItemAdders =
    ReadFromFile(File = GrWaveExtraction.input),
    ReadFromFile(File = ApparentHorizonFinders.input),
    AddSmoothAhRadius(Surface              = AhC;
                      InitialGuess         = AhCFromPlunge
                      (SmoothAhRadiusFile=__DIR__/Init-SmoothAhRadius.txt;);
                      InitialGuessTstart   = __StartTime__;
                      DerivOrderFuncVsTime = 2;
                      UpdateDependsOn      = AhC;
                      MeasureAtStepAfterChunkFraction = true;
#                      Controller           = Pid;
                      MeasurementFractionOfChunk = __MeasureFractionOfChunk__;
                      OverrideTimescaleTuner =
                      Simple(MaxThreshold       = __Threshold__;
                             MaxThresholdItem   = DeltaR0AhCOver20;
                             DtMaxThresholdItem = DtDeltaR0AhCOver20;
                             CrossingTimeFac    = 0.5;
                             MinDampTime        = 0.1*__TdampSmoothAh__;
                             MaxDampTime        = 20;
                             IncreaseFactor     = 1.01;
                             DecreaseFactor     = 0.98;
                             InitialState       = Specified
                                                 (Tdamping=__TdampSmoothAh__);
                             CheckpointFile     = Cp-TdampSmoothRAhC.txt;);
    ),
    AddSmoothAhRadius(Surface              = AhC;
                      WhatToCompute          = SmoothMinDeltaRNoLam00;
                      MapPrefixGridToAhFrame = GridToDistorted;
                      FunctionVsTimeLam00    = LambdaFactor0;
                      InitialGuess         = AhCFromPlunge
                      (SmoothAhRadiusFile=__DIR__/Init-SmoothAhRadius.txt;);
                      InitialGuessTstart   = __StartTime__;
                      DerivOrderFuncVsTime = 2;
                      UpdateDependsOn      = AhC;
                      MeasureAtStepAfterChunkFraction = true;
#                      Controller           = Pid;
                      MeasurementFractionOfChunk = __MeasureFractionOfChunk__;
                      OverrideTimescaleTuner =
                      Simple(MaxThreshold       = __Threshold__;
                             MaxThresholdItem   = DeltaR0AhCOver20;
                             DtMaxThresholdItem = DtDeltaR0AhCOver20;
                             CrossingTimeFac    = 0.5;
                             MinDampTime        = 0.1*__TdampSmoothAh__;
                             MaxDampTime        = 20;
                             IncreaseFactor     = 1.01;
                             DecreaseFactor     = 0.98;
                             InitialState       = Specified
                                                 (Tdamping=__TdampSmoothAh__);
                             CheckpointFile  = Cp-TdampSmoothRAhCNoLam00.txt;);
    );
DataBoxItems =
    ReadFromFile(File=GrSetupAndEvolution.input),
    ReadFromFile(File=ConstraintDamping.input),
    ReadFromFile(File=GaugeItems.input),

    #-----------------------------------------------------------------
    # This defines DeltaR0AhCOver20 for use in TimeScaleTuner::Simple
    #-----------------------------------------------------------------
    Domain(Items =
           SmoothMinRAhMinusRex
           (Output                         = DeltaR0AhCOver20;
            FunctionVsTimeLam00            = LambdaFactor0;
            FunctionVsTimeMinDeltaRNoLam00 = SmoothMinDeltaRNoLam00AhC;
            ComputeFirstDeriv              = no;
            ScaleFactor                    = 0.05;
           ),
           SmoothMinRAhMinusRex
           (Output                         = DtDeltaR0AhCOver20;
            FunctionVsTimeLam00            = LambdaFactor0;
            FunctionVsTimeMinDeltaRNoLam00 = SmoothMinDeltaRNoLam00AhC;
            ComputeFirstDeriv              = yes;
            ScaleFactor                    = 0.05;
           ),
    ),

    #---------------------------------------------------------
    # DataBoxAdders for Generalized Harmonic
    #---------------------------------------------------------
    Domain(Items=
           AddGeneralizedHarmonicInfo(MatterSourceName=;)),
    Subdomain(Items=
              Add3Plus1ItemsFromGhPsiKappa(psi=psi;kappa=kappa;OutputPrefix=;),
              ),
    Boundary(Items=
             GeneralizedHarmonicBoundaryItems(FramePrefix=Inertial),
             ExtractDerivFromParent(Input=Inertialdkappa,Inertialdpsi),
             AddBoundaryOneFormInDualFrame(FramePrefix=Inertial),
             SpatialCoordMap::TransformTensorToDifferentFrame
             (Input          = GridOutwardNormalOneForm;
              Output         = DistortedOutwardNormalOneForm;
              IndexPositions = l;
              MapPrefixToOutputFrame=GridToDistorted;
              ),
             ),
    ## For constraint preserving BCs
    Boundary(Items =
             ExtractDerivFromParent(Input=InertialdH;Output=InertialdH),
             ExtractFromParent(Input=H;Output=H),
             ),

    # For StateChangers
    Domain(Items = AddControlSysTimescaleHolder),

################################################################
# Apparent horizon finder
################################################################
    Domain(Items=
           CoordMappedSurfaceInfo(Input               = AhC;
                                  Output              = AhCInertial;
                                  Recenter            = false;
                                  MapPrefix           = DistortedToInertial;
                                  MapGoesToOutputFrame= true;),
           ),
    Subdomain
    (Items=
     AddSpacetimeJacobianAndHessianItems(MapPrefix=GridToInertial;),
     AddSpacetimeJacobianAndHessianItems(MapPrefix=DistortedToInertial;),
     Add3Plus1ItemsFromGhPsiKappaInDifferentFrame
     (psi = psi; Lapse = Lapse; Shift = Shift;
      kappa = kappa; OutputPrefix =Distorted;
      MapPrefixToInputFrame = DistortedToInertial;
      ),
     ),

    #---------------------------------------------------------
    # Used for State3 in AhSpeeds
    #---------------------------------------------------------
    Boundary(Items =
             SpatialCoordMap::TransformTensorToDifferentFrame
             (Input =InertialUnitNormalVector;
              Output=GridUnitNormalVector;
              IndexPositions=u;
              MapPrefixToInputFrame=GridToInertial;
             ),
             SpatialCoordMap::TransformTensorToDifferentFrame
             (Input =InertialUnitNormalVector;
              Output=DistortedUnitNormalVector;
              IndexPositions=u;
              MapPrefixToInputFrame=DistortedToInertial;
             ),
             SpatialCoordMap::TransformTensorToDifferentFrame
             (Input =InertialUnitNormalOneForm;
              Output=DistortedUnitNormalOneForm;
              IndexPositions=l;
              MapPrefixToInputFrame=DistortedToInertial;
             ),
             ExtractDerivFromParent(Input=dgFromkappa),
             ExtractFromParent(Input=GridToInertial::HessianSpaceSpace),
             ExtractFromParent(Input=GridToInertial::HessianTimeSpace),
             ExtractFromParent(Input=DistortedToInertial::HessianSpaceSpace),
             ExtractFromParent(Input=DistortedToInertial::HessianTimeSpace),
             SpatialDerivLapseFromGhKappa(kappa=kappa;
                                          InversePsi=Invpsi;
                                          Output=InertialdLapse),
             SpatialDerivShiftFromGhKappa(kappa=kappa;
                                          InversePsi=Invpsi;
                                          Output=InertialdShift),
             DerivOfUnitNormalOneForm(Output      = InertialdUnitNormalOneForm;
                                      FramePrefix = Inertial;
                                      dg          = dgFromkappa;
                                      UnitNormalOneForm=
                                      InertialUnitNormalOneForm;
                                      UnitNormalVector=
                                      InertialUnitNormalVector;
                                      NormalizationFactor =
                                      PenaltyCorrectionFactor;
             ),
    ),

    ################################################################
    # Quantities measured on apparent horizon
    ################################################################
    Subdomain(Items=
              # NOTE: passing the map prefix directly to the
              # differentiator item is more efficient as this
              # will then transform the derivative index
              # directly from the topological to the mapped frame
              FirstDeriv(Input  = DistortedSpatialChristoffel2ndKind;
                         MapPrefix = GridToDistorted;
                         Output = dDistortedSpatialChristoffel2ndKind;),
#             FirstDeriv(Input  = DistortedSpatialChristoffel2ndKind;
#                        Output = dGRIDDistortedSpatialChristoffel2ndKind;),
#             SpatialCoordMap::TransformDerivToDifferentFrame
#             (Input=dGRIDDistortedSpatialChristoffel2ndKind;
#              Output=dDistortedSpatialChristoffel2ndKind;
#              MapPrefixToOutputFrame=GridToDistorted;
#             ),
              Ricci(Output = DistortedSpatialRicci;
                    Gamma  = DistortedSpatialChristoffel2ndKind;
                    dGamma = dDistortedSpatialChristoffel2ndKind;),
              Trace(Input             = DistortedSpatialRicci;
                    Output            = DistortedSpatialRicciScalar;
                    Indices           = 0,1;
                    PositionOfIndices = l,l;
                    InvMetric         = DistortedInvg;),

              #For Bnn
              FirstDeriv(Input=DistortedK;
                         MapPrefix=GridToDistorted;
                         Output=dDistortedK;),
#             FirstDeriv(Input=DistortedK;
#                        Output=dGRIDDistortedK;),
#             SpatialCoordMap::TransformDerivToDifferentFrame
#             (Input=dGRIDDistortedK;
#              Output=dDistortedK;
#              MapPrefixToOutputFrame=GridToDistorted;
#             ),
              CovariantDerivative(Input=DistortedK;
                                  CoordDeriv=dDistortedK;
                                  Indices=ll;
                                  Christoffel2ndKind
                                  =DistortedSpatialChristoffel2ndKind;
                                  Output=DistortedCdK;
              ),
              WeylMagnetic(Output=DistortedWeylB;
                           CdK=DistortedCdK;
                           g=Distortedg;
                           SqrtDetg=DistortedSqrtDetg;
	      ),
	      # for Redshift
	      FirstDeriv(
		  Input = Lapse;
		  Output = dDistortedLapse;
		  MapPrefix = GridToDistorted;
	      ),
	      FlattenDeriv(
		  Input = dDistortedLapse;
		  Output = dDistortedFlattenedLapse;
		  DerivPosition = First;
              );

    ),

    ################################################################
    # Compute Constraints and constraint energy
    ################################################################
    Subdomain
    (Items=
     AddGhConstraintItems(psi    = psi;
                          kappa  = kappa;
                          H      = H;
                          OutputPrefix=;
                          dpsi   = Inertialdpsi;
                          dkappa = Inertialdkappa;
                          dH     = InertialdH;
                          MeasureConstraintsOutsideSurfaces=AhC(Prefix=AhC);
                          MapPrefixFromGridToAhFrame = GridToDistorted;
     ),
     NormOfProjectedDerivConstraint
     (
      Input                        =2Con;
      DerivativeIndex              =0;
      Output                       =NormOf2Con;
      DataMeshNorm                 =L2Norm;
      MapPrefixFromGridToInputFrame=GridToInertial;
      AddRadialProjectionForB2B3   =yes),

     NormOfProjectedDerivConstraint
     (
      Input                        =3Con;
      DerivativeIndex              =0;
      Output                       =NormOf3Con;
      DataMeshNorm                 =L2Norm;
      MapPrefixFromGridToInputFrame=GridToInertial;
      AddRadialProjectionForB2B3   =yes),
    ),

    ## Coords for char speed stuff
    Boundary(Items=
             ExtractFromParent(Input=GridToInertial::MappedCoords;
                               Output=InertialCoordsOnSlice),
             ),

    ################################################################
    # Eigenvalues and other observers
    ################################################################
    Subdomain(Items=
  SpatialCoordMap::TransformSpatialComponentsOfSpacetimeTensorToDifferentFrame
              (MapPrefixToInputFrame=GridToInertial;
               Input =psi; Output=PseudoGridpsi;
               IndexPositions=ll;),
  SpatialCoordMap::TransformSpatialComponentsOfSpacetimeTensorToDifferentFrame
              (MapPrefixToInputFrame=GridToInertial;
               Input =kappa; Output=PseudoGridkappa;
               IndexPositions=lll;),

              RatioOfSmallestToLargestEigenvalue(Input=Eigenvaluesg;
                                                 Output=MinOverMaxEvg),
              Eigenvalues(Input=g;Output=Eigenvaluesg),
              GridDiagnostics(PowerMonitorItems =Powerpsi,Powerkappa;),
              NumberOfFilteredModes(
                FilterLabelDefault = ExpCheb;
                FilterLabelForS2   = KillTop;
                # FilterLabelForB3   = KillTop;
              ),
              PowerMonitor(Inputs                  = psi,kappa;
                           AddRadialMonitorForB2B3 = yes;
                           UseTensorYlmForS2       = yes;
                           InputPrefixForTensorYlm = PseudoGrid;
                           ),
              );
